:mod:`cache.obj_store`
======================

.. py:module:: cache.obj_store


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cache.obj_store.ObjStore
   cache.obj_store.DirObjStore




.. class:: ObjStore

   Bases: :py:obj:`Protocol`

   Base class for protocol classes.

   Protocol classes are defined as::

       class Proto(Protocol):
           def meth(self) -> int:
               ...

   Such classes are primarily used with static type checkers that recognize
   structural subtyping (static duck-typing), for example::

       class C:
           def meth(self) -> int:
               return 0

       def func(x: Proto) -> int:
           return x.meth()

       func(C())  # Passes static type check

   See PEP 544 for details. Protocol classes decorated with
   @typing.runtime_checkable act as simple-minded runtime protocols that check
   only the presence of given attributes, ignoring their type signatures.
   Protocol classes can be generic, they are defined as::

       class GenProto(Protocol[T]):
           def meth(self) -> T:
               ...

   .. method:: __setitem__(self, key, val)


   .. method:: __getitem__(self, key)


   .. method:: __delitem__(self, key)


   .. method:: __contains__(self, key)


   .. method:: clear(self)



.. class:: DirObjStore

   Bases: :py:obj:`ObjStore`

   Base class for protocol classes.

   Protocol classes are defined as::

       class Proto(Protocol):
           def meth(self) -> int:
               ...

   Such classes are primarily used with static type checkers that recognize
   structural subtyping (static duck-typing), for example::

       class C:
           def meth(self) -> int:
               return 0

       def func(x: Proto) -> int:
           return x.meth()

       func(C())  # Passes static type check

   See PEP 544 for details. Protocol classes decorated with
   @typing.runtime_checkable act as simple-minded runtime protocols that check
   only the presence of given attributes, ignoring their type signatures.
   Protocol classes can be generic, they are defined as::

       class GenProto(Protocol[T]):
           def meth(self) -> T:
               ...

   .. attribute:: path
      :annotation: :cache.util.PathLike

      

   .. attribute:: key_bytes
      :annotation: :int = 8

      

   .. method:: __attrs_post_init__(self)


   .. method:: __setitem__(self, key, val)


   .. method:: __getitem__(self, key)


   .. method:: __delitem__(self, key)


   .. method:: __contains__(self, key)


   .. method:: clear(self)



