:mod:`cache.readers_writer_lock`
================================

.. py:module:: cache.readers_writer_lock


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cache.readers_writer_lock.Lock
   cache.readers_writer_lock.ReadersWriterLock
   cache.readers_writer_lock.NaiveReadersWriterLock
   cache.readers_writer_lock.FastenerReadersWriterLock




.. class:: Lock

   Bases: :py:obj:`Protocol`

   Base class for protocol classes.

   Protocol classes are defined as::

       class Proto(Protocol):
           def meth(self) -> int:
               ...

   Such classes are primarily used with static type checkers that recognize
   structural subtyping (static duck-typing), for example::

       class C:
           def meth(self) -> int:
               return 0

       def func(x: Proto) -> int:
           return x.meth()

       func(C())  # Passes static type check

   See PEP 544 for details. Protocol classes decorated with
   @typing.runtime_checkable act as simple-minded runtime protocols that check
   only the presence of given attributes, ignoring their type signatures.
   Protocol classes can be generic, they are defined as::

       class GenProto(Protocol[T]):
           def meth(self) -> T:
               ...

   .. method:: __enter__(self)


   .. method:: __exit__(self, exc_type, exc_val, exc_tb)



.. class:: ReadersWriterLock

   Bases: :py:obj:`Protocol`

   A [Readers-Writer Lock] guarantees N readers xor 1 writer.

   This permits read-concurrency.

   [Readers-Writer Lock]: https://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock

   .. attribute:: reader
      :annotation: :Lock

      

   .. attribute:: writer
      :annotation: :Lock

      


.. class:: NaiveReadersWriterLock(lock)


   Bases: :py:obj:`ReadersWriterLock`

   ReadersWriterLock constructed from a regular Lock.

   A true readers-writers lock permits read concurrency (N readers
   xor 1 writer), but in some cases, that may be more maintanence
   effort than it is worth. A `NaiveReadersWriterLock` permits 1 reader
   xor 1 writer.


.. class:: FastenerReadersWriterLock

   .. attribute:: path
      :annotation: :cache.util.PathLikeFrom

      

   .. method:: __attrs_post_init__(self)


   .. method:: writer(self)
      :property:


   .. method:: reader(self)
      :property:



