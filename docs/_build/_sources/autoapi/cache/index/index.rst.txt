:mod:`cache.index`
==================

.. py:module:: cache.index


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cache.index.IndexKeyType
   cache.index.Index




Attributes
~~~~~~~~~~

.. autoapisummary::

   cache.index.Key
   cache.index.Val


.. class:: IndexKeyType


   Bases: :py:obj:`enum.IntEnum`

   Enum where members are also (and must be) ints

   .. attribute:: MATCH
      :annotation: = 0

      

   .. attribute:: LOOKUP
      :annotation: = 1

      


.. data:: Key
   

   

.. data:: Val
   

   

.. class:: Index(schema)


   Bases: :py:obj:`Generic`\ [\ :py:obj:`Key`\ , :py:obj:`Val`\ ]

   Abstract base class for generic types.

   A generic type is typically declared by inheriting from
   this class parameterized with one or more type variables.
   For example, a generic mapping type might be defined as::

     class Mapping(Generic[KT, VT]):
         def __getitem__(self, key: KT) -> VT:
             ...
         # Etc.

   This class can then be used as follows::

     def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
         try:
             return mapping[key]
         except KeyError:
             return default

   .. method:: items(self)


   .. method:: get_or(self, keys, thunk)


   .. method:: __setitem__(self, keys, val)


   .. method:: __delitem__(self, keys)


   .. method:: __getitem__(self, keys)


   .. method:: __contains__(self, keys)


   .. method:: update(self, other)



